diff -ur CMakeLists.txt CMakeLists.txt
--- CMakeLists.txt	2023-04-14 18:00:53.040196242 -0700
+++ CMakeLists.txt	2023-04-14 18:19:01.715619616 -0700
@@ -88,15 +88,15 @@
 
 # The library directory is configured by setting CMAKE_INSTALL_LIBDIR.
 # Otherwise, the defaults set here are used.
-IF(EXISTS "/usr/lib64" AND NOT IS_SYMLINK "/usr/lib64")
-    SET(CMAKE_INSTALL_LIBDIR "lib64" CACHE STRING "Library Directory Basename")
-ELSE()
+#IF(EXISTS "/usr/lib64" AND NOT IS_SYMLINK "/usr/lib64")
+#    SET(CMAKE_INSTALL_LIBDIR "lib64" CACHE STRING "Library Directory Basename")
+#ELSE()
     SET(CMAKE_INSTALL_LIBDIR "lib" CACHE STRING "Library Directory Basename")
-ENDIF()
+#ENDIF()
 
 ## Traverse subdirectories
 ADD_SUBDIRECTORY (src/SeExpr)
-ADD_SUBDIRECTORY (src/SeExprEditor)
-ADD_SUBDIRECTORY (src/doc)
-ADD_SUBDIRECTORY (src/demos)
+#ADD_SUBDIRECTORY (src/SeExprEditor)
+#ADD_SUBDIRECTORY (src/doc)
+#ADD_SUBDIRECTORY (src/demos)
 ADD_SUBDIRECTORY (src/tests)
diff -ur src/build/macros.cmake src/build/macros.cmake
--- src/build/macros.cmake	2023-04-14 18:00:53.044196270 -0700
+++ src/build/macros.cmake	2023-04-14 18:18:39.999498623 -0700
@@ -22,7 +22,7 @@
     ADD_CUSTOM_COMMAND(
       SOURCE "${FLEX_L_PREFIX}In.cpp"
       COMMAND "sed"
-      ARGS -e "'s/${PARSER_PREFIX}wrap(n)/${PARSER_PREFIX}wrap()/g'" -e "'s/yy/${PARSER_PREFIX}/g'" -e "'s/YY/${PARSER_PREFIX}YY/g'"  ${FLEX_L_PREFIX}In.cpp | tee ${FLEX_L_PREFIX}.cpp ${CMAKE_CURRENT_SOURCE_DIR}/generated/${FLEX_L_PREFIX}.cpp > /dev/null
+      ARGS -e "'s/${PARSER_PREFIX}wrap(n)/${PARSER_PREFIX}wrap()/g'" -e "'s/yy/${PARSER_PREFIX}/g'" -e "'s/YY/${PARSER_PREFIX}YY/g'"  ${FLEX_L_PREFIX}In.cpp | tee ${FLEX_L_PREFIX}.cpp ${CMAKE_CURRENT_SOURCE_DIR}/generated/${FLEX_L_PREFIX}.cpp
       OUTPUT ${FLEX_L_PREFIX}.cpp
       DEPENDS ${FLEX_L_PREFIX}In.cpp
       )
@@ -38,7 +38,7 @@
     ADD_CUSTOM_COMMAND(
       SOURCE "y.tab.h"
       COMMAND "sed"
-      ARGS -e "'s/yy/${PARSER_PREFIX}/g'" -e "'s/YY/${PARSER_PREFIX}YY/g'" y.tab.h | tee  ${BISON_Y_PREFIX}.tab.h ${CMAKE_CURRENT_SOURCE_DIR}/generated/${BISON_Y_PREFIX}.tab.h > /dev/null
+      ARGS -e "'s/yy/${PARSER_PREFIX}/g'" -e "'s/YY/${PARSER_PREFIX}YY/g'" y.tab.h | tee  ${BISON_Y_PREFIX}.tab.h ${CMAKE_CURRENT_SOURCE_DIR}/generated/${BISON_Y_PREFIX}.tab.h
       OUTPUT ${BISON_Y_PREFIX}.tab.h
       DEPENDS y.tab.h
       )
@@ -46,7 +46,7 @@
     ADD_CUSTOM_COMMAND(
       SOURCE "y.tab.c"
       COMMAND "sed"
-      ARGS -e "'s/yy/${PARSER_PREFIX}/g'" -e "'s/YY/${PARSER_PREFIX}YY/g'" y.tab.c | tee ${BISON_Y_PREFIX}.cpp  "${CMAKE_CURRENT_SOURCE_DIR}/generated/${BISON_Y_PREFIX}.cpp" > /dev/null
+      ARGS -e "'s/yy/${PARSER_PREFIX}/g'" -e "'s/YY/${PARSER_PREFIX}YY/g'" y.tab.c | tee ${BISON_Y_PREFIX}.cpp  "${CMAKE_CURRENT_SOURCE_DIR}/generated/${BISON_Y_PREFIX}.cpp"
       OUTPUT ${BISON_Y_PREFIX}.cpp
       DEPENDS y.tab.c ${BISON_Y_PREFIX}.tab.h
       )
diff -ur src/SeExpr/SeNoise.cpp src/SeExpr/SeNoise.cpp
--- src/SeExpr/SeNoise.cpp	2023-04-14 18:00:53.040196242 -0700
+++ src/SeExpr/SeNoise.cpp	2023-04-14 18:18:39.999498623 -0700
@@ -16,7 +16,9 @@
 */
 
 #include <iostream>
+#ifdef __SSE4_1__
 #include <smmintrin.h>
+#endif
 
 #include "SeExprBuiltins.h"
 namespace{
@@ -25,13 +27,18 @@
 #include "SeNoise.h"
 namespace SeExpr{
 
+#ifdef __SSE4_1__
 inline double floorSSE(double val) {
-    return _mm_cvtsd_f64(_mm_floor_sd(_mm_set_sd(0.0), _mm_set_sd(val)));
+    return (_mm_floor_sd(_mm_set_sd(0.0), _mm_set_sd(val)))[0];
 }
 
 inline double roundSSE(double val) {
-    return _mm_cvtsd_f64(_mm_round_sd(_mm_set_sd(0.0), _mm_set_sd(val), _MM_FROUND_TO_NEAREST_INT));
+    return (_mm_round_sd(_mm_set_sd(0.0), _mm_set_sd(val), _MM_FROUND_TO_NEAREST_INT))[0];
 }
+#else
+#define floorSSE floor
+#define roundSSE round
+#endif
 
 
 //! This is the Quintic interpolant from Perlin's Improved Noise Paper
diff -ur src/SeExpr/SePlatform.h src/SeExpr/SePlatform.h
--- src/SeExpr/SePlatform.h	2023-04-14 18:00:53.040196242 -0700
+++ src/SeExpr/SePlatform.h	2023-04-14 18:18:39.999498623 -0700
@@ -70,10 +70,11 @@
 #   define fseeko _fseeki64
 #   define ftello _ftelli64
 
+/*
     inline double log2(double x) {
         return log(x) * 1.4426950408889634; 
     }
-
+*/
     typedef unsigned int uint32_t;
 #   define M_E (2.7182818284590452354)
 #   define M_PI (3.141592653589793238)
